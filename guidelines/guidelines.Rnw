\documentclass[11pt,a4paper]{article}

<<knitr-setup, include = FALSE>>=
## Text width and height.
textwidth <- 6.50127
textheight <- 9.72632
## Size of font in plots.
pointsize <- 10
add.in <- function(x){
    paste(x, "in", sep = "")
}
opts_chunk$set(dev = "pdf", fig.align = "center", comment = "#",
               dev.args = list(pointsize = 0.9*pointsize))
@ 

\usepackage{bm}
\usepackage{booktabs}
\usepackage[textwidth = 6.5in, top = 2cm, bottom = 3cm]{geometry}
\usepackage{hyperref}
\usepackage{layouts}

\title{Guidelines for authors}
\author{}

\begin{document}

\maketitle

%% Printing width and height of text. Should match vaules in knitr-setup.
%%\printinunitsof{in}\prntlen{\textwidth}
%%\printinunitsof{in}\prntlen{\textheight}

\section{Overview}
\label{sec:overview}

This book is being written in
\href{https://www.latex-project.org/}{\LaTeX}, using
\href{http://yihui.name/knitr/}{\texttt{knitr}} for dynamic report
generation, and \href{https://git-scm.com/}{git} for version
control. This document aims to describe what these things are, why
they are useful, and how to use them. Learning these tools might seem
time consuming, however, they will greatly save time in the long run
(not only for this project, but also for future projects any of us may
be involved in).

The source file for this document (\texttt{guidelines.Rnw}) uses many
of these tools. It is worth comparing to the compiled PDF
(\texttt{guidelines.pdf}) to understand what some of the code is
doing. Feel free to make minor modifications and see what effects
these have upon recompiling the document. 

Compiling a document under this framework is straightforward in
RStudio: first, ensure \texttt{knitr} is set to weave \texttt{.Rnw}
files (Click \texttt{Tools} $>$ \texttt{Sweave} $>$ \texttt{Weave Rnw
  files using: knitr}), then simply open the \texttt{.Rnw} file and click
``Compile PDF''.

This document also provides various guidelines to aid consistency
throughout the book, for example, by setting out some rules for
notation and code style.

\section{Repository structure}
\label{sec:repo-structure}

This project is hosted as a git repository on GitHub at
\url{https://github.com/david-borchers/SCR-Book} (more about git and
GitHub in Section \ref{sec:git}). The general structure of this
repository is as follows:
\begin{enumerate}
\item The main source file is called \texttt{scr-book.Rnw}, and is in
  the main directory of this repository.
\item Source files for individual chapters are found inside the
  directory \texttt{chapters/}.
\item Figures generated automatically by \texttt{knitr} are found
  inside the directory \texttt{figure/} (more on \texttt{knitr}
  in Section \ref{sec:knitr}).
\item Figures \emph{not} generated by \texttt{knitr} (e.g., any
  photos) are found inside the directory \texttt{keepfigure/}.
\item This book includes examples from various data sets. The
  \texttt{analysis/} directory contains data (in
  \texttt{analysis/data/}), code to fit models to these data sets (in
  \texttt{analysis/code/}), and \texttt{.RData} files generated from
  the code that contain R objects with information about the fitted
  models (in \texttt{analysis/objects/} (more on this in Section
  \ref{sec:code}).
\end{enumerate}

\section{\LaTeX}
\label{sec:latex}

\LaTeX\ is a freely available typesetting system that is widely used
within scientific fields. As most of us use \LaTeX\ fairly reguarly,
this document will not cover how to use it. Various introductory
guides are available online.

\subsection{Guidelines}

Here are some guidelines for \LaTeX\ code style:
\begin{enumerate}
\item Label all chapters, sections, equations, figures, and tables so
  that we can reference them automatically. Labels for chapters should
  begin with \texttt{chap:}, those for sections should begin with
  \texttt{sec:}, and those for equations should begin with
  \texttt{eq:}. Labels for figures and tables are mentioned below in
  the \texttt{knitr} section. Provide informative labels; for example,
  \texttt{\textbackslash label\{chap:detector-types\}} is good, and
  \texttt{\textbackslash label\{chap:chap4\}} is bad.
\item Use these labels to reference chapters, sections, equations,
  figures, and tables. For example, ``In Chapter
  \texttt{\textbackslash ref\{chap:detector-types\}} we discuss...''
  is good, and ``In Chapter 4 we discuss...'' is bad.
\item Use \texttt{\textbackslash eqref\{\}} instead of
  \texttt{\textbackslash ref\{\}} to reference equations.
\item Start all section, figure and equation labels with the chapter label - to prevent ambiguity if we use the same label for a section, equation or figure in different chapters. For example, if we have a chapter labelled \texttt{\textbackslash label\{ch:ER+detfun\}} and in it a section that you want to label ``\texttt{traps}'', then use the label \texttt{\textbackslash label\{sec:ER+detfun.traps\}}. This makes for long labels, but prevents any ambiguity that could be a real hassle to sort out later.
\end{enumerate}

\subsection{Bibliography}

[Somebody write something for how we are doing references.]

\subsection{Index}

Identify items to appear in the index as you write sections or chapters. Add these to the list of indexed items at the bottom of the \texttt{scr-book.Rnw} file (there are some examples there now). (Maybe we should make a separate index file?)
\section{\texttt{knitr}}
\label{sec:knitr}

In the preparation of a document, R code is often run to calculate
values displayed in-text or in tables, and to produce plots. Often
this R code is called separately, and the required values are
copy-pasted into text or tables, and plots are inserted using
\texttt{\textbackslash includegraphics\{\}}.

This is not very efficient. If you wish to change a plot, or
recalculate values to write in-text or insert into tables, you must
find the R code you originally wrote, rerun it, copy-paste values
across, and replace the file containing the image of the plot. The
\texttt{knitr} package provides an alternative: it allows you to
insert chunks of R code into your \LaTeX\ source file, directly
calculating values and generating plots to appear in the final
document. This means everything used to create the document appears in
one file, and if you want to make a change you only need to make a
change in one place---the R code. It also allows us to neatly display
any code we want to appear in the final document.

\subsection{Plots}

Below is a simple example of a \texttt{knitr} chunk that generates
Figure \ref{fig:simple-plot} (but you'll only be able to see it in the
source \texttt{guidlines.Rnw} document).

<<simple-plot, echo = FALSE, fig.width = textwidth, fig.height = 0.25*textheight, out.width = add.in(textwidth), out.height = add.in(0.25*textheight), fig.pos = "tb", fig.cap = "A simple caption.">>=
par(mar = c(4.1, 4.1, 0.1, 0.1))
set.seed(1234)
x <- 1:10
y <- runif(10, 0, 1)
plot(x, y, ylim = c(0, 1))
@ 

As you can see, a chunk starts with options enclosed in angled
brackets (\texttt{<<>>}). Enclosed within these are a number of
possible options, some of which have been used above:
\begin{enumerate}
\item The first is the name of the chunk, which also gets passed to
  any plots the chunk generates. Keep this an informative name (e.g.,
  \texttt{frog-survey-area}, not \texttt{plot1}).
\item \texttt{echo}: Logical (i.e., either \texttt{TRUE} or
  \texttt{FALSE}). If \texttt{TRUE}, the code within the chunk is also
  displayed in the document. You can't see the R code that generated
  Figure \ref{fig:simple-plot} in this PDF because the this option was
  set to \texttt{FALSE}.
\item \texttt{include}: Logical. If \texttt{TRUE} output from the
  chunk is shown in the final document. For example, it is useful to
  set this to \texttt{FALSE} if the chunk is only being used to
  calculate values that are used in later chunks.
\item \texttt{eval}: Logical. If \texttt{TRUE} the code is run when
  compiling the document; otherwise, it is not. For example, it is
  useful to set this to \texttt{FALSE} if you want to display code in
  the final document, but you do not want to run it.
\item \texttt{fig.width} and \texttt{fig.height}: The width and height
  of the PDF file generated by R. Note that in a code chunk at the top
  of this document the R objects \texttt{textwidth} and
  \texttt{textheight} have been specified as the width and height of
  the text on the page. This can be useful if you want to specify the
  width of the plot to exactly span the width of the text, or some
  proportion of the height of the page, as is the case here.
\item \texttt{out.width} and \texttt{out.height}: Slightly different
  to \texttt{fig.width} and \texttt{fig.height}, as these specify the
  dimensions of the image as they appear on the page (as opposed to
  the dimensions of the PDF generated by R). Many people ignore these
  options, but we should \emph{always ensure they are the same as}
  \texttt{fig.width} and \texttt{fig.height}, but wrapped in the
  \texttt{add.in()} function. This is a little fiddly, but it ensures
  that any text appearing in any plots (e.g., axes labels) will be the
  same font size across all plots we generate, which is nice.
\item \texttt{fig.pos}: A character string that specifies where on the
  page to put the plot (as one would normally put in square brackets
  after \texttt{\textbackslash figure{}} in regular \LaTeX).
\item \texttt{fig.cap}: The figure caption.
\end{enumerate}

Descriptions of other chunk options are available
\href{http://yihui.name/knitr/options/}{here}. Note that we can
reference the figure produced by a chunk using \texttt{\textbackslash
  ref\{fig:chunk-name\}}. Here is an example: the simple plot above is
labelled Figure \ref{fig:simple-plot}.

\subsection{Values in-text}

Inserting values into text is straightforward using
\texttt{\textbackslash Sexpr}. For example, in the code chunk
\texttt{simple-plot} a vector $\bm{y}$ was generated. The mean of
$\bm{y}$ is \Sexpr{round(mean(y), 2)}. The standard deviation of
$\bm{y}$ is \Sexpr{round(sd(y), 2)}. The largest element of $\bm{y}$
is \Sexpr{round(max(y), 2)}. These values are being automatically
inserted based on R calculations, rather than having to copy-paste
them directly into the text. If we change the data $\bm{y}$, we do
\emph{not} need to change any of this text (which we might otherwise
forget to do).

\subsection{Tables}

Tables can be inserted using \texttt{knitr} and the \texttt{xtable} R
package. Below is an R chunk that shows a basic example resulting in
Table \ref{tab:simple-table}, using the vectors $\bm{x}$ and $\bm{y}$
we generated in the previous code chunk.

<<simple-table, results = "asis">>=
library(xtable)
## Names of vectors.
names <- c("$\\bm{x}$", "$\\bm{y}$")
## Calculating means and standard deviations.
means <- c(mean(x), mean(y))
sds <- c(sd(x), sd(y))
## Calculating smallest and largest values.
smallest <- c(min(x), min(y))
largest <- c(max(x), max(y))
## Putting everything we want in our table into a data frame.
tab <- data.frame(names, means, sds, smallest, largest)
## Names of the columns in our table.
colnames(tab) <- c("Vector", "Mean", "SD", "Min", "Max")
caption <- "A simple table caption."
## Creating the table object.
tab.obj <- xtable(tab, label = "tab:simple-table", caption = caption, digits = 3)
## Printing the table object.
print(tab.obj, type = "latex", include.rownames = FALSE, hline.after = c(-1, 0, 2),
      caption.placement = "top", booktabs = TRUE, table.placement = "tb",
      sanitize.text.function = identity, math.style.negative = TRUE)
@ 

A few things to note:
\begin{enumerate}
\item Set the chunk option \texttt{results = "asis"}, otherwise the
  \LaTeX\ code \texttt{xtable} has generated will appear in the
  document, rather than the table itself.
\item The \texttt{hline.after} argument specifies after which rows
  we'd like a horizontal line in the table. This part is a little
  weird, but the first row is the one for $\bm{x}$. If we want a
  horizontal line \emph{before} the \emph{first} row, we need to tell
  \texttt{xtable} to put a horizontal line \emph{after} the $0$th
  row. If we want a line \emph{before} the column headers (the $0$th
  row), we need to tell \texttt{xtable} to put a horizontal line
  \emph{after} the $-1$st row. Hence, \texttt{hline.after = c(-1, 0,
    2)}.
\item You can use \LaTeX\ code in the table (e.g., to generate the
  $\bm{x}$ and $\bm{y}$ row names in Table \ref{tab:simple-table}),
  but the \texttt{print()} function must have
  \texttt{sanitize.text.function = identity}.
\item Setting the argument \texttt{booktabs = TRUE} means that \LaTeX\
  uses the \texttt{booktabs} package to make the table, which results
  in something slightly more aesthetically pleasing than default
  \LaTeX\ tables.
\item You can do fairly complex tables with \texttt{xtable}, but the
  code can get pretty fiddly. Ben has spent many hours frustratingly
  learning the intricacies of \texttt{xtable}, and is happy to help
  out.
\end{enumerate}

\section{git}
\label{sec:git}

Version control allows a project's changes to be tracked over
time. The program git is a very popular piece of software used for
version control. There are various advantages to using git. Here are a
few:
\begin{enumerate}
\item An entire version history is kept, and it is easy to switch
  between changes. If you rewrite a passage but think you made it
  worse, it simple to return back to the original. If you had some
  code that was working perfectly fine, but then you broke it and you
  can't remember what you did, again you can revert back.
\item Someone can rewrite something that was originally written by
  another author. If the original writer doesn't like it, they can
  easily discard their changes. Essentially, we don't have to be
  careful and polite about rewriting other people's stuff---we can
  easily pick and choose which changes to keep.
\item It manages conflicts. If two people change the same file at the
  same time, when they both ``push'' their changes back to the
  repository, git will merge the changes together to create a new
  file. If the people have changed the same parts, it will flag this
  and ask you to fix the conflict.
\end{enumerate}

A git repository can be hosted anywhere (e.g., on your laptop or
desktop, or on some server). Many people host theirs on the website
GitHub (\url{https://github.com/}). GitHub provides a nice interface
for looking at what is in your repository, and how it is changed over
time.

Git is easy to use when working in RStudio. [Somebody write something
for how git works in RStudio for the benefit of those who do not yet
use git.]

General guidelines to be expanded upon:
\begin{enumerate}
\item On its way to compiling the PDF, \LaTeX, \texttt{knitr}, and
  \texttt{xtable} generate a lot of extra files (e.g., \texttt{.aux},
  \texttt{.toc}, and PDFs of plots in \texttt{figure/}). We do not
  want to be commiting these every time we make changes. Only commit
  the \emph{source} files that you have modified yourself, and not any
  files that have been automatically generated by \LaTeX,
  \texttt{knitr}, or \texttt{xtable}. To make these junk files
  invisible to git, add them to the list in the \texttt{.gitignore}
  file, found within the main directory of the repository.
\end{enumerate}

\section{Code}
\label{sec:code}

The book will include output from models fitted to various example
data sets. We could put the code to fit these models directly into our
\texttt{knitr} chunks, but this would mean that every time we compile
our PDF we would have to wait for every single model in the book to be
fitted. Instead, it is better we fit these models in advance, save the
resulting R objects in \texttt{.RData} files, which are then loaded
inside our \texttt{knitr} chunks using
\texttt{load("file.RData")}. (Of course some of this code will be
presented in this book to show the reader how to fit various models,
but these will appear in \texttt{knitr} chunks with \texttt{eval =
  FALSE}, so that they are not actually run upon compilation of the
PDF.)

Furthermore, it is important that we monitor any changes to any output
presented in our book that are caused by (1) the introduction of
errors to our code, or (2) updates to any software that we are
using. For example, if an update to an R package causes our code to
throw an error, then we want to change our code. If a package
maintainer introduces a major bug and a bunch of estimates we present
change drastically, we want to know about this as soon as possible
(this would be a minor embarassment for the package maintainer, but a
major one for us if the book went to print in such a state).

It is therefore important that we keep any code that fits models
presented in our book in the same location, and test it to ensure it
is working as we'd expect. Here is the general idea:
\begin{enumerate}
\item Put any data sets in \texttt{analysis/data/} (do we want a
  particular format like \texttt{.csv} or \texttt{.RData}, or is a
  mixture OK?).
\item Put code into \texttt{analysis/code/}. This code should load the
  relevant data, fit models, and save \texttt{.RData} files that
  include R objects with model results. Make sure these
  \texttt{.RData} files are saved to \texttt{analysis/objects/}. These
  can then be loaded by \texttt{knitr} code in our \texttt{.Rnw}
  files.
\item Write a test or two in \texttt{/analysis/code/tests.r} (using
  the \texttt{testthat} package framework) for each model fit to
  ensure the results are what we'd expect.
\item Ben's desktop will automagically run the code within all files
  in \texttt{analysis/code/} on a regular basis (daily or weekly or
  something). Any tests that fail can be investigated.
\end{enumerate}

For everyone to successfully compile book's PDF, we'll all need the
same R packages installed on each of our computers. To make this as
easy as possible, the script \texttt{analysis/code/packages.r} is
designed to install any required R packages that are not already on
the user's machine. If any code you write requires a package that does
not yet appear in the first line of this script, please add it. This
applies to both code in any files within
\texttt{analysis/code/packages.r} or within any \texttt{knitr} chunks
within the book's source files. The first \texttt{knitr} chunk in the
book's main \texttt{.Rnw} will run this script to check that the
computer compiling the PDF has installed all packages it requires.

\section{Code style}
\label{sec:code-style}

We want to have code that looks consistent throughout the book. (It
would also be nice to be consistent throughout all the code in
\texttt{analysis/code/}, but that is less important).

Here are a couple of style guides we could use:
\begin{enumerate}
\item \href{https://google.github.io/styleguide/Rguide.xml}{Google's R style guide}
\item \href{http://adv-r.had.co.nz/Style.html}{Style guide in Hadley
    Wickham's Advanced R book}. This is a slightly modified version of
  the Google style guide.
\end{enumerate}

\section{Writing style}
\label{sec:writing-style}

Quick notes to be expanded upon:
\begin{enumerate}
\item Some notes from Eric:
  \begin{itemize}
  \item Use British spelling (`centre', not `center', global
    search-and-replace `z' for `s', etc.).
  \item Use British punctuation (punctuation outside quotation
    marks$^{*}$, no commas after acronyms$^{*}$ like `e.g.' and
    `i.e.').
  \item Italics for non-English words and abbreviations$^{*}$
    (\textit{et al}, \textit{e.g.}, \textit{etc.}).
  \end{itemize}
\item Do we want to abide by a particular style guide so that we have
  recommendations for almost all possible questions we may have
  regarding style?
  \begin{itemize}
  \item Ben typically abides by the Chicago Manual of Style (CMOS). He
    has a physical copy if anyone wants to see it. Otherwise, the
    university has an online subscription; visit
    \href{http://www.chicagomanualofstyle.org/16/contents.html}{this
      link}.
  \item $^{*}$Note that starred points in notes made by Eric are not
    consistent with CMOS recommendations.
  \item The \emph{New Oxford Style Manual} might be more consistent
    with Eric's notes. There is an online document by Oxford (nowhere
    near as comprehensive as the book), which sketches a few style
    recommendations that seem to roughly follow Eric's notes.
  \end{itemize}
\item There are some writing style guidelines in
  \texttt{SpringerStyleFiles/}; see the \texttt{instruct.pdf}
  document, along with other PDFs and templates (e.g.,
  \texttt{chapter.Rnw} in the \texttt{templates} directory).
\end{enumerate}

\section{Notation}
\label{sec:notation}

Quick notes to be expanded upon:
\begin{enumerate}
\item Use square brackets for any PDFs or PMFs (e.g., $[y]$, $[y | x]$).
\item Use the \texttt{bm} package so they
  are still italicised ($\bm{x}$, $\bm{y}$, $\bm{\theta}$). This also boldifies Greek
  letters (as can be seen with $\theta$ here).
\item We will not distinguish between random variables and fixed values - notation gets too complex.
\item As far as possible, distinguish between vectors and matrices, by using bold lowercase for the former and bold uppercase for the latter. 
\end{enumerate}

\section{A simple example}
\label{sec:example}

Ben has put together a simple example of how to include a chapter that
makes a plot from a model fitted to an example data set in
\texttt{analysis/data/} with code in \texttt{analysis/code/}. See the
file \texttt{chapters/example.Rnw}.

\end{document}
