.
\chapter{Area and transect detectors}
\label{chap:area-transect}

\abstract{}

\section{Introduction}
\label{sec:area-transect-intro}

Thus far, we have considered detecting individuals with various types
of equipment, including live-capture traps, cameras, hair snares,
microphones, and hydrophones. In each case, a single detector is
positioned at a \emph{discrete} point in space that can be represented
by a single pair of Cartesian coordinates. However, some species are
more readily detected by searching one or more areas, or by travelling
along one or more line transects. Such surveys can be conducted
through an active search by human surveyors travelling by foot
\citep[e.g.,][]{Royle+Young:08} or vehicle, \todo{Insert Conservation
  Biology paper I recently reviewed; should be online sometime soon}
or by using passive detection technologies such as satellites
\citep[e.g.,][]{Fretwell+al:14} or drones equipped with
high-definition video cameras
\citep[e.g.,][]{Stevenson+al:inprep}. \todo{Maybe this will be
  published before this book?} The surveys may attempt to find the
animals themselves, or \emph{cues} they leave behind that can somehow
be attributed to individuals. Examples of such cues include feces,
hair, footprints, nests, and burrows, where individual identification
may be possible through microsatellite DNA, or some other distinctive
feature(s) of the cues.

In this chapter, we introduce SCR models for area search and line
transect surveys, which were first developed by \cite{Royle+Young:08},
and \cite{Efford:11}. These surveys may consist of one or more
occasions, and, on each, one or more (potentially different) areas are
searched or line transects are travelled. Each such area or line
transect can be thought of as a detector.

The type of data we observe and the survey we require depends on
whether individuals or cues are the unit of detection:
\begin{enumerate}
\item If the survey aims to physically detect the animals themselves,
  then it is usually only possible for each individual to be detected
  no more than once over the course of an occasion---in which case it
  is necessary for the survey to have multiple occasions in order to
  obtain spatial and temporal recaptures.
\item If the survey aims to detect cues from animals, then it is
  possible to detect cues from the same animal at multiple points in
  space, possibly all within the same searched area or transect, or
  across multiple such areas or transects---in which case a single
  occasion provides enough information to fit an SCR model.
\end{enumerate}
In both cases, any given area or transect may detect multiple
individuals in a single occasion.  The distinction above is equivalent
to that seen between multi-catch traps and proximity detectors in
Chapter \ref{chap:det-types}:
\begin{enumerate}
\item On a multi-catch trap survey, any given individual can only be
  detected by, at most, one detector, and multiple occasions are
  required.
\item On a proximity detector survey, individuals can be detected by
  any number of detectors, and may even be detected by the same
  detector numerous times.
\end{enumerate}

It is \emph{not} necessary to search more than one unique area or
travel more than one unique trasect---the exact location of each
detection is recorded, and so a single area or line transect can
provide the spatial recaptures that are required. Also, note that line
transect surveys as described here only record detection locations on
the one-dimensional transect, and not perpendicular distances from the
transect. SCR methods to use the perpendicular distances have not yet
been developed.

The SCR framework we have established is extended in Section
\ref{sec:area-transect-likelihood} for area and line transect survey
data. Specifically, methods for cue- and individual-based data are
presented in Sections \ref{sec:area-transect-cue} and
\ref{sec:area-transect-individual}, respectively, along with how the
\texttt{secr} package can be used to fit the corresponding models. If
there is spatial heterogeneity in either detectability or effort
across the areas or transects, then these methods must be extended;
this is presented in Section \ref{sec:area-transect-spatial}.

\section{The capture history likelihood component}
\label{sec:area-transect-likelihood}

As per Chapter \ref{chap:det-types}, the likelihood component that is
affected by the detection process is $[\bm{\Omega}_n | \bm{S}_n]$.
Many of the concepts discussed in previous chapters do not translate
directly across once the spatial nature of these detectors changes
from discrete (zero-dimensional) points to either one-dimensional line
transects or two-dimensional areas. For example, probabilities of
detection can no longer simply depend on the distance between an
activity centre and the point at which a detector is
deployed---instead, we must also consider the lengths of the line
transects and the paths they take, or the shapes and sizes of the
areas searched. Nevertheless, the SCR framework we have developed in
earlier chapters can be easily extended to neatly encompass the
modelling of data from such surveys.

On each of $K$ occasions, $J$ areas are searched or line transects are
travelled. Areas may take the shape of any polygon, and line transects
may follow any path. Let $A_j \subset R^2$ be the region enclosed by
the $j$th such polygon (for area searches) or the path taken by the
$j$th line transect (for line transects). Thus, $A_j$ is a
two-dimensional subspace of $R^2$ for area search surveys, and a
one-dimensional subspace of $R^2$ for line transect surveys.

In previous chapters, detectors have either provided binary or count
detection data, and this remains the same for area searches and line
transects: if cues are the detection unit then we observe
$\omega_{ijk}$ as a count of how many cues from the $i$th individual
were detected in the $j$th area or line transect on the $k$th
occasion, and if individuals are the detection unit then we observe
$\omega_{ijk}$ binary data indicating whether or not the $i$th
individual was detected in the $j$th area or transect on the $k$th
occasion (although recall only one such area or transect can detect a
particular individual on an occasion).

In addition to $\bm{\Omega}_n$, we also observe the precise location
that each detection was made within the areas or along the
transects. Let $\bm{y}_{ijk}$ contain all detection locations
associated with the $i$th individual in the $j$th area or transect on
the $k$th occasion, and let all such information be held in
$\bm{Y}_n$. This can be modelled as additional information (Section
\ref{sec:det-types-additional-data}), providing the likelihood
\begin{equation}
  [\bm{\Omega}_n, \bm{Y}_n | \bm{S}_n] = [\bm{\Omega}_n | \bm{S}_n] \times [\bm{Y}_1 | \bm{\Omega}_n, \bm{S}_n]. \nonumber
\end{equation}

Below we separately deal with the terms in the likelihood above for
cue- and individual-based surveys.


\subsection{Cue-based area search and line transect surveys}
\label{sec:area-transect-cue}

Models for area search and line transect surveys for which cues are
detection units behave similarly to those for proximity detector
surveys: (1) the same individual can be detected by multiple detectors
(i.e., areas or transects), (2) each detector can make multiple
detections of the same individual within the same occasion, and (3)
detection of one individual does not prevent detection of others
within the same occasion. As per Section
\ref{sec:det-types-proximity}, we assume independence between
individuals, detectors, and occasions, giving
\begin{equation}
  [\bm{\Omega}_n, \bm{Y}_n | \bm{S}_n] = \prod_{i = 1}^n \prod_{j = 1}^J \prod_{k = 1}^K [ \omega_{ijk} | \bm{s}_i] \times [\bm{y}_{ijk} | \omega_{ijk}, \bm{s}_i ]. \nonumber
\end{equation}
It is possible either $J = 1$ or $K = 1$, or both; that is, we can
estimate density when the data are from a survey with only a single
occasion, or if it constitutes only a single area or transect.

As before, here we conceptualise the encounter rate $\lambda_{ijk}$ as
the number of detections of the $i$th individual at the $j$th detector
(i.e., area or transect) on the $k$th occasion per unit time. This was
previously conceptualised as a function of distance between the
detector and the individual's activity centre, but this is no longer
possible once detectors are considered as areas or lines rather than
points.

Intuitively, more of an individual's cues are likely to be closer to
its activity centre. We can model this by treating the locations of
detected cues as a Poisson point pattern; refer to Section
\ref{sec:spmod-pps} for a summary of Poisson point processes. We do
this by fitting a \emph{cue intensity function}, $\Lambda_{ik}(d)$
instead of an encounter rate function, $\lambda_{ijk}(d)$. The former
can take the same parameters and thus has the same general set of
functional forms at the latter, but its interpretation is slightly
different. Rather than being the number of detections per unit time
and a detector located at a discrete point distance $d$ from an
activity centre, it is (1) the density of cues per unit area that are
found upon a search at distance $d$ from an activity centre for area
searches, or (2) the density of cues per unit distance of the transect
travelled that are found at distance $d$ from an activity centre for
line transects. The subscripts of $i$ and $k$ of the function
$\Lambda_{ik}(d)$ acknowledge that it may vary both across individuals
and across occasions, as introduced in Chapter \ref{ch:detcovs}.

Let $d(\bm{x}, \bm{s})$ the distance between some location $\bm{x}$
and a hypothetical activity centre $\bm{s}$. Recall from Section
\ref{sec:spmod-pps} that the expected number of points generated by a
Poisson point process can be found by integrating over its
domain. Thus, for area searches, the number of cues we find from one
particular individual with activity centre $\bm{s}$ upon a total
search of its home range is a Poisson random variable with expectation
$\int_{R^2} \Lambda_{ik}(d(\bm{x}, \bm{s})) d\bm{x}$.

Many areas may be searched over the course of an area search survey,
and these can take the shape of any polygon; likewise, many transects
may be travelled, and these may take any path (e.g., Figure
\ref{fig:area-transect-integral}). Let the region of the survey area
enclosed by the $j$th such polygon be $A_j$. The expected number of
cues found within $A_j$ can be determined by only integrating over
this region; that is, the expected number of the $i$th individual's
cues detected in the $j$th area on the $k$th occasion is
\begin{equation}
  \lambda_{ijk} = \int_{A_j} \Lambda_{ik}(d(\bm{x}, \bm{s})) d\bm{x}.
  \label{eq:area-transect-er}
\end{equation}
The above also holds for line transect surveys, but the integral is
now a \emph{line integral}---it reperesents the area beneath the cue
intensity function along the path of the transect that is travelled,
see Figure \ref{fig:area-transect-integral}. As with proximity
detectors, due to independence we obtain
\begin{equation}
  [ \bm{\omega}_{ijk} | \bm{s}_i ] = \mathrm{Poisson}(\lambda_{ijk}). \nonumber
\end{equation}

<<area-transect-integral, echo = FALSE, fig.width = textwidth, fig.height = 4.80405, out.width = add.in(textwidth), out.height = add.in(4.80405), fig.pos = "tb", fig.cap = "Hypothetical surveys on which two areas are searched (top row) or line transects are travelled (bottom row). The cue intensity function $\\Lambda_{ik}(\\bm{x})$ is depicted by the darkness of the grey shading in the plots on the left. The expected number of cues detected within $A_1$ and $A_2$ for either survey are found by calculating the volume under the red and blue surfaces (top right) for area searches, or the area beneath the red and blue lines (bottom right) for area search and line transect surveys, respectively.">>=
par(oma = c(2, 0, 0, 2) + 0.1, mar = rep(0, 4), xaxs = "i", yaxs = "i")
inches.per.line <- par("omi")[1]/par("oma")[1]
mar.width <- sum(par("omi")[c(2, 4)])
mar.height <- sum(par("omi")[c(1, 3)])
box.width.in <- (textwidth - mar.width)/2
box.width.cm <- box.width.in*2.54
## Layout stuff.
layout.mat <- matrix(c(1, 0, 3, 2, 0, 4), nrow = 3, ncol = 2)
layout(layout.mat, widths = lcm(rep(box.width.cm, 2)), heights = lcm(c(box.width.cm, 0.5, box.width.cm)), respect = TRUE)
## Resolution of plots.
res <- 500
## Sorting out areas.
unique.x <- seq(-0.5, 0.5, length.out = res)
unique.y <- seq(-0.5, 0.5, length.out = res)
z <- matrix(NA, nrow = res, ncol = res)
for (i in 1:res){
    for (j in 1:res){
        dist <- sqrt(unique.x[i]^2 + unique.y[j]^2)
        z[i, j] <- 10*exp(-dist^2/(2*0.15^2))
    }
}
z.range <- c(0, max(z))
area1.x.lims <- c(0.1, 0.3)
area1.y.lims <- c(-0.3, -0.1)
area2.x.lims <- c(-0.3, -0.1)
area2.y.lims <- c(-0.4, -0.2)
area1.vertices <- matrix(c(rep(area1.x.lims, each = 2), area1.y.lims[2], rep(area1.y.lims[1], 2), area1.y.lims[2]), ncol = 2)
area2.vertices <- matrix(c(rep(area2.x.lims, each = 2), area2.y.lims[2], rep(area2.y.lims[1], 2), area2.y.lims[2]), ncol = 2)
in.area1 <- outer(unique.x, unique.y, function(x, y) x >= area1.x.lims[1] & x <= area1.x.lims[2] &
                  y >= area1.y.lims[1] & y <= area1.y.lims[2])
in.area2 <- outer(unique.x, unique.y, function(x, y) x >= area2.x.lims[1] & x <= area2.x.lims[2] &
                  y >= area2.y.lims[1] & y <= area2.y.lims[2])
## Top left.
plot.new()
plot.window(xlim = c(-0.5, 0.5), ylim = c(-0.5, 0.5), asp = 1)
col.seq <- seq(1, 0.25, length.out = 1000)
image(x = unique.x, y = unique.y, z = z, zlim = z.range, col = rgb(col.seq, col.seq, col.seq), add = TRUE)
points(0, 0, pch = 4, cex = 2, lwd = 2)
polygon(area1.vertices, border = "red", lwd = 2)
text(area1.vertices[3, 1], area1.vertices[3, 2], expression(A[1]), adj = c(-0.25, 0), cex = 1.5)
polygon(area2.vertices, border = "blue", lwd = 2)
text(area2.vertices[3, 1], area2.vertices[3, 2], expression(A[2]), adj = c(-0.25, 0), cex = 1.5)
box()
## Top right.
plot.new()
box()
par(new = TRUE)
## Floor of box.
z.temp <- matrix(rep(0, 4), nrow = 2, ncol = 2)
perspmat <- persp(x = c(-0.5, 0.5), y = c(-0.5, 0.5), z = z.temp, zlim = c(0, 1),
                  col = "white", theta = 30, phi = 30, box = FALSE)
par(new = TRUE)
## Grey surface.
z.out <- z
z.out[in.area1 | in.area2] <- NA
ltheta <- -35
lphi <- 0
perspmat <- persp(x = unique.x, y = unique.y, z = z.out, zlim = c(0, max(z)),
                  shade = 0.75, col = "grey", theta = 30, phi = 30,
                  ltheta = ltheta, lphi = lphi, border = NA, axes = FALSE)
par(new = TRUE)
## Red surface.
z.area1 <- z
z.area1[!in.area1] <- NA
perspmat <- persp(x = unique.x, y = unique.y, z = z.area1, zlim = c(0, max(z)),
                  shade = 0.75, col = "red", theta = 30, phi = 30,
                  ltheta = ltheta, lphi = lphi, border = NA, axes = FALSE, box = FALSE)
area1.outline.x <- c(seq(area1.vertices[1, 1], area1.vertices[2, 1], length.out = 100),
                     seq(area1.vertices[2, 1], area1.vertices[3, 1], length.out = 100),
                     seq(area1.vertices[3, 1], area1.vertices[4, 1], length.out = 100),
                     seq(area1.vertices[4, 1], area1.vertices[1, 1], length.out = 100))
area1.outline.y <- c(seq(area1.vertices[1, 2], area1.vertices[2, 2], length.out = 100),
                     seq(area1.vertices[2, 2], area1.vertices[3, 2], length.out = 100),
                     seq(area1.vertices[3, 2], area1.vertices[4, 2], length.out = 100),
                     seq(area1.vertices[4, 2], area1.vertices[1, 2], length.out = 100))
area1.outline.z <- apply(cbind(area1.outline.x, area1.outline.y), 1, function(x) 10*exp(-(sqrt(sum(x^2)))^2/(2*0.15^2)))
area1.outline.trans <- trans3d(x = area1.outline.x, area1.outline.y, area1.outline.z, pmat = perspmat)
lines(area1.outline.trans$x, area1.outline.trans$y)
par(new = TRUE)
## Blue surface.
z.area2 <- z
z.area2[!in.area2] <- NA
perspmat <- persp(x = unique.x, y = unique.y, z = z.area2, zlim = c(0, max(z)),
                  shade = 0.75, col = "blue", theta = 30, phi = 30,
                  ltheta = ltheta, lphi = lphi, border = NA, axes = FALSE, box = FALSE)
area2.outline.x <- c(seq(area2.vertices[1, 1], area2.vertices[2, 1], length.out = 100),
                     seq(area2.vertices[2, 1], area2.vertices[3, 1], length.out = 100),
                     seq(area2.vertices[3, 1], area2.vertices[4, 1], length.out = 100),
                     seq(area2.vertices[4, 1], area2.vertices[1, 1], length.out = 100))
area2.outline.y <- c(seq(area2.vertices[1, 2], area2.vertices[2, 2], length.out = 100),
                     seq(area2.vertices[2, 2], area2.vertices[3, 2], length.out = 100),
                     seq(area2.vertices[3, 2], area2.vertices[4, 2], length.out = 100),
                     seq(area2.vertices[4, 2], area2.vertices[1, 2], length.out = 100))
area2.outline.z <- apply(cbind(area2.outline.x, area2.outline.y), 1, function(x) 10*exp(-(sqrt(sum(x^2)))^2/(2*0.15^2)))
area2.outline.trans <- trans3d(x = area2.outline.x, area2.outline.y, area2.outline.z, pmat = perspmat)
lines(area2.outline.trans$x, area2.outline.trans$y)
x.range <- diff(range(unique.x))
y.range <- diff(range(unique.y))
title.pos <- trans3d(x = min(unique.x), y = min(unique.y) - 0.05*y.range,
                     z = mean(c(0, max(z))), pmat = perspmat)
text(x = title.pos$x, y = title.pos$y, labels = expression(paste(Lambda, "(", italic(d), "(", bolditalic(x), ",", bolditalic(s), "))")),  srt = 105)
## Bottom left.
plot.new()
plot.window(xlim = c(-0.5, 0.5), ylim = c(-0.5, 0.5), asp = 1)
col.seq <- seq(1, 0.25, length.out = 1000)
image(x = unique.x, y = unique.y, z = z, zlim = z.range, col = rgb(col.seq, col.seq, col.seq), add = TRUE)
points(0, 0, pch = 4, cex = 2, lwd = 2)
## Making some transects.
step.size <- 0.001
n.steps <- 950
## Transect 1.
transect1.x <- numeric(n.steps)
transect1.y <- numeric(n.steps)
transect1.bearing.change <- numeric(n.steps)
n.turny.steps <- 350
turny.steps <- ceiling((n.steps + 1)/2 - n.turny.steps/2):floor((n.steps + 1)/2 + n.turny.steps/2) + 100
transect1.bearing.change[turny.steps] <- 0.0075*pi*sin(seq(0, 2*pi, length.out = n.turny.steps))
transect1.bearing <- 1*pi/3
transect1.x[1] <- -0.4
transect1.y[1] <- 0.0
for (i in 2:n.steps){
    transect1.bearing <- transect1.bearing + transect1.bearing.change[i - 1]
    transect1.x[i] <- transect1.x[i - 1] + step.size*sin(transect1.bearing)
    transect1.y[i] <- transect1.y[i - 1] + step.size*cos(transect1.bearing)
}
transect1.z <- apply(cbind(transect1.x, transect1.y), 1, function(x) 10*exp(-(sqrt(sum(x^2)))^2/(2*0.15^2)))
## Transect 2.
transect2.x <- numeric(n.steps)
transect2.y <- numeric(n.steps)
transect2.bearing.change <- numeric(n.steps)
n.turny.steps <- n.steps
turny.steps <- ceiling((n.steps + 1)/2 - n.turny.steps/2):floor((n.steps + 1)/2 + n.turny.steps/2) + 150
transect2.bearing.change[turny.steps] <- -0.0002*pi
transect2.bearing <- 5*pi/8
transect2.x[1] <- -0.475
transect2.y[1] <- -0.1
for (i in 2:n.steps){
    transect2.bearing <- transect2.bearing + transect2.bearing.change[i - 1]
    transect2.x[i] <- transect2.x[i - 1] + step.size*sin(transect2.bearing)
    transect2.y[i] <- transect2.y[i - 1] + step.size*cos(transect2.bearing)
}
transect2.z <- apply(cbind(transect2.x, transect2.y), 1, function(x) 10*exp(-(sqrt(sum(x^2)))^2/(2*0.15^2)))
## Plotting the transects.
lines(transect1.x, transect1.y, col = "red", lwd = 2)
text(transect1.x[1], transect1.y[1], expression(A[1]), adj = c(0, -0.75), cex = 1.5)
lines(transect2.x, transect2.y, col = "blue", lwd = 2)
text(transect2.x[1], transect2.y[1], expression(A[2]), adj = c(0, 1.75), cex = 1.5)
box()

## Bottom right.
plot.new()
par(yaxs = "r")
plot.window(xlim = c(0, (n.steps - 1)*step.size), ylim = c(0, max(c(transect1.z, transect2.z))))
box()
abline(h = 0, col = "grey")
lines((0:(n.steps - 1))*step.size, transect1.z, col = "red")
lines((0:(n.steps - 1))*step.size, transect2.z, col = "blue")
mtext("Distance along transect", side = 1, line = 1)
mtext(expression(paste(Lambda, "(", italic(d), "(", bolditalic(x), ",", bolditalic(s), "))")), side = 4, line = 1)
@ 

\todo[inline]{Something that I have realised, which I think is a neat
  thing to point out: When detectors are {\bf two}-dimensional areas,
  then $\Lambda_{ik}()$ is expected number of detetections per occasion per
  km$^\mathbf{2}$ searched and we need to evaluate a {\bf
    two}-dimensional integral to get $\lambda_{ijk}$. When detectors
  are {\bf one}-dimensional lines (i.e., transects), then $\Lambda_{ik}()$
  is expected number of detections per occasion per km$^\mathbf{1}$
  travelled and we need to evaluate a {\bf one}-dimensional integral
  to get $\lambda_{ijk}$. When detectors are {\bf zero}-dimensional
  points, then $\Lambda_{ik}()$ (or just $\lambda()$) is expected number of
  detetections per occasion per km$^\mathbf{0}$ (i.e., just detections
  per occasion) and we need to evaluate a {\bf zero}-dimensional
  integral to get $\lambda_{ijk}$ (i.e., we don't actually need to
  evaluate an integral at all). This is interesting to me as a
  statistician. But is it interesting to the reader?}

For each detection in the $j$th area or along the $j$th transect we
observe a detection location within $A_j$. From Chapter
\ref{chap:sppmod}, the probability density of a point's location is
proportional to the intensity function of its point
process. Therefore, assuming independence between the location of cues
given the individual's activity centre location, the likelihood
component due to locations of detections by the $j$th area or line
transect is
\begin{align}
  [ \bm{y}_{ijk} | \omega_{ijk}, \bm{s}_i ] &= \prod_{l =
    1}^{\omega_{ijk}} [ \bm{y}_{ijkl} | \omega_{ijkl}, \bm{s}_i ] \nonumber
  \\ &= \prod_{l = 1}^{\omega_{ijk}}\frac{\Lambda_{ik}(d(\bm{y}_{ijkl},
    \bm{s}_i))}{\int_{A_j} \Lambda_{ik}(d(\bm{x}, \bm{s}_i))
    d\bm{x}}, \hspace{2em} \bm{y}_{ijkl} \in A_j, \nonumber
\end{align}
where $\bm{y_{ijkl}}$ is the location of the $l$th detected cue from
the $i$th individual by the $j$th area or line transect on the $k$th
occasion. The denominator above ensures that $[ \bm{y}_{ijkl} |
  \omega_{ijkl}, \bm{s}_i ]$ is a valid PDF, in that it integrates to
1.

\subsection{Individual-based area search and line transect surveys}
\label{sec:area-transect-cue}

A salient distinction between cue- and individual-based surveys are
that individuals can only be detected in one location per occasion on
the latter. We can adjust the cue-based method to account for this in
a similar way to how multi-catch trap likelihood was adjusted from the
proximity detector likelihood. That is, we no longer may take a
product over the $J$ traps as the detectors do not behave
independently within occasions---if a particular individual is
detected within an area or along a transect, then the other areas or
transects may not detect it. This provides the likelihood component
\begin{equation}
  [\bm{\Omega}_n | \bm{S}_n] = \prod_{i = 1}^n
  \prod_{k = 1}^K [\bm{\omega}_{i \cdot k} |
  \bm{s}_i] \times [\bm{y}_{i \cdot k} | \bm{\omega}_{i \cdot k}, \bm{s}_i]. \nonumber
\end{equation}

For area searches, we redefine $\Lambda_{ik}(d)$ as the probability density
of the location of an individual at distance $d$ from its activity
centre. That is, for every one square unit of area searched at
distance $\Lambda_{ik}(d)$ from the activity centre, there is a
$\Lambda_{ik}(d)$ probability that the animal is within that area (i.e., it
is \emph{detectable}). Furthermore, even upon searching an area that
encapsulates its location on the $k$th occasion, there is a chance
that it will nevertheless be detected; let $p_d$ be the probability of
successfully detecting an individual, given that it is in a searched
area. Likewise, for line transect surveys, we redefine $\Lambda_{ik}(d)$ so
that it gives the probability of the animal being detectable from the
transect per unit distance of transect travelled at distance $d$ from
the activity centre. \todo{I struggled to explain this part nicely. If
  anyone fancies a bash, go for it.} Again $p_d$ remains the
probability of detection given that the animal is detectable. 

The probability of the individual both being detectable at the $j$th
searched area or transect on the $k$th occasion \emph{and} being
detected is therefore
\begin{equation}
  \Pr(\omega_{ijk} = 1 | \bm{s}_i) = p_d \int_{A_j} \Lambda_{ik}(d(\bm{x},
  \bm{s})) d\bm{x}, \label{eq:area-transect-prob}
\end{equation}
and so we obtain
\begin{equation}
  [ \omega_{i \cdot k} | \bm{s}_i ] = 
  \begin{cases}
    \Pr(\omega_{ijk} = 1 | \bm{s}_i) & \text{if detected in area or transect $j$.} \\
     1 - \sum_{j = 1}^J \Pr(\omega_{ijk} = 1 | \bm{s}_i) & \text{if not detected by any area or transect,} \nonumber
  \end{cases}
\end{equation}
Given detection at the $j$th area or transect, the PDF for the precise
location within the area or along the transect remains as per cue-based surveys:
\begin{equation}
  [ \bm{y}_{i \cdot k} | \bm{\omega}_{i \cdot k}, \bm{s}_i ] = \frac{\Lambda_{ik}(d(\bm{y}_{i \cdot k},
    \bm{s}_i))}{\int_{A_j} \Lambda_{ik}(d(\bm{x}, \bm{s}_i))
    d\bm{x}}, \hspace{2em} \bm{y}_{i \cdot k} \in \{A_j: \bm{\omega}_{ijk} = 1\}. \nonumber
\end{equation}
One difference here is that we only observe a single pair of
coordinates in $\bm{y}_{i \cdot k}$, as we only make a single
detection of an individual during any given occasion.

\section{Spatial heterogeneity in detectability}
\label{sec:area-treansect-spatial-het}

Detectability of animals may vary over space, for example due to
covariates (Section \ref{sec:ERdetfun-dos-effects} or varying effort
(Section \ref{sec:ERdetfund-effort}) across detectors. For example,
all else being equal, camera traps are likely to make more detections
if they are positions in open plains rather than dense jungle (due to
a clearer line of sight) and if they operate for longer.

Accounting for such effects was achieved by attaching covariates
(e.g., habitat) and effort data to each detector. However, for area
search and line transect surveys, such variables may vary
\emph{within} detectors. We extend the function $\Lambda_{ik}(d)$ to
$\Lambda_{ixk}(d)$ to account for this---it now allows for
heterogeneity across space in the same way $\lambda_{ijk}(d)$ allows
for heterogeneity across point detectors in earlier chapters. This
means that covariates and effort must be measured at all locations
within each area or transect.

One important point to note is that---if effort is measured in time
searched---it may no longer be sensible to model effort similarly to
how it was for point detectors. Previously, it was assumed that effort
was directly proportional to encounter rates; for example, all else
being equal, a camera trap operating for twice as long was expected to
make twice the number of detections. However, there is likely a
nonlinear relationship between encouter rate and effort with area and
line transect searches. For example, if cues are easily spotted, then
a search of time $T$ may detect $90\%$ of the cues within a searched
region. Searching for a further period of time $T$ (resulting in total
effort of $2T$) cannot possibly detect as many cues again, as only
$10\%$ of those that are available remain. In such cases, it may be
more sensible to model effort as one would any other
covariate---although restricting parameters so that the relationship
is monotonic increasing appears sensible (i.e., in no cases should
additional effort decrease the encounter rate).\todo{There appear
  links between area searches and removal methods in this regard, but
  I don't know enough about the latter to mention anything sensible
  about this.}

\section{Computation}
\label{sec:area-transect-computation}

The SCR likelihood function for area search and line transect surveys
has an additional layer of complexity---for each individual it is
necessary to not only integrate over the possible activity centre
location, but additionally over each area or transect in order to
calculate the encounter rates (Equation \eqref{eq:area-transect-er})
or detection probabilities (Equation \eqref{eq:area-transect-prob}).

As before, integration over activity centre locations can be
approximated by summing over the mask points, as per Section
\ref{sec:}. \todo{Insert section reference. At the time of writing I
  can't find any detail on this integration in earlier chapters?}  Two
methods of approximating the integrals over each area or transect in
the that have been used are as follows:
\begin{enumerate}
\item Using the same simple quadrature rule as per integration over
  mask points. This splits each area searched into `pixels' or each
  transect into a series of short distances, over which a sum is
  computed.
\item Using \emph{Gaussian quadarature}. Such quadrature rules require
  that the integral is of a specific form, and they are typically more
  accurate than simpler quadrature rules when their use is appropriate
  (or, alternatively, can be computed more efficiently for equivalent
  approximation error).
\end{enumerate}

\section{In \texttt{secr}}
\label{sec:area-transect-secr}

\subsection{Using \texttt{polygon} and \texttt{transect} detectors}

Setting up area search detectors in the \texttt{secr} package can be
achieved by specifying the vertices of the polygons that define the
boundary of the areas searched, before calling the \texttt{secr}
function \texttt{make.poly()}. For example, to set up two square areas
with sides of length 200 m (similar to the configuration in Figure
\ref{fig:area-transect-integral}), we can use the following code:
<<area-transect-area-setup>>=
## First area's vertices.
area1 <- data.frame(x = c(100, 300, 300, 100),
                    y = c(300, 300, 100, 100))
## Second area's vertices.
area2 <- data.frame(x = c(-300, -100, -100, -300),
                    y = c(400, 400, 200, 200))
## Making the traps object.
area.traps <- make.poly(polylist = list(area1, area2), 
                        exclusive = FALSE)
@ 
The argument \texttt{exclusive} determines whether or not an
individual can be detected more than once per occasion---and so this
should be \texttt{FALSE} for cue-based surveys, and \texttt{TRUE} for
individual-based surveys.

Objects can be created similarly for line transect surveys---data
frames define a series of points along a transect, and
\texttt{make.transect()} (rather than \texttt{make.poly()}) is used to
combine these into a traps object.

Area searches are called `polygon' detectors in \texttt{secr}, or
`polygonX' if they are `exclusive' detectors. Likewise, line transects
are called `transect' detectors or `transectX' if they are `exclusive'
detectors).

\todo[inline]{Need to put something in here to explain how to read in
  area search/line transect data. However, this hasn't been done for
  any other data types yet anywhere in the book, so I'll wait until
  there is a template to follow/refer to before writing this
  here. Also need an example data set to fit, below.}

Fitting an area search or line transect model can then be achieved
with a simple call to \texttt{secr.fit()}:
<<area-transect-area-fit, eval = FALSE>>=
area.fit <- fit.secr(capt = area.capt, buffer = 100)
@

This fits the model via maximum likelihood, using a Gaussian
quadrature rule (as discussed in Section
\ref{sec:area-transect-computation}). However, there are some
restrictions under this framework:
\begin{enumerate}
\item The \texttt{secr} package allows the user to attach a single
  value for each covariate and a single value of effort to each
  detectors (in this case, each area searched or line transect
  travelled). However, these can vary within area search and line
  transect detectors. Thus, this model-fitting approach does
  \emph{not} allow heterogeneity in covariate values or effort within
  detectors.
\item As it is currently implemented, approximation of integrals by
  Gaussian quadrature requires that each area is convex in a
  left-to-right direction. That is, drawing a vertical line through
  the area at any point will only pass through the boundary twice.
\end{enumerate}
For some simple remedies to the second restriction, see the
\texttt{secr} package's vignette on area search and line transect
detectors.

\subsection{Discretising areas and line transects}

A more general solution to both of the above problems is to use a
standard quadrature rule. Recall that integration over activity
centres is approximated by discretising the survey area into mask
points. The same can be achieved here by breaking down areas and line
transects into `pixels', each of which is represented by a single
`trap' (Figure \ref{fig:area-transect-discretise-plot}). Each
detection is allocated to the nearest pixel. These traps either act
like proximity detectors (for cue-based surveys) or multi-catch traps
(for individual-based surveys).

Capture history objects for area search or line transect data can
easily be discretised into arrays of proximity detectors or
multi-catch traps using the \texttt{discretise()} function:
<<area-transect-discretise, eval = FALSE>>=
area.capt.discrete <- discretize(area.capt, spacing = 20, 
                                 outputdetector = "count")
@ 
<<area-transect-discretise-plot, echo = FALSE, fig.width = textwidth, fig.height = 0.4*textwidth, out.width = add.in(textwidth), out.height = add.in(0.4*textwidth), fig.pos = "tb", fig.cap = "The original area search \\texttt{traps} object (left), and a discretised \\texttt{traps} object (right). For the latter, the centre of each cross is considered the location of a proximity detector.">>=
par(mfrow = c(1, 2), mar = rep(0, 4), oma = rep(0, 4))
area.traps.discrete <- discretize(area.traps, spacing = 20, 
                             outputdetector = "count")
plot(area.traps.discrete, hidetr = TRUE)
plot(area.traps, add = TRUE)
plot(area.traps.discrete)
@ 

The \texttt{spacing} argument specifies the distance between `traps'
(or centres of pixels) that are adjacent in the grid. Deciding upon a
sensible value for this is a similar process for deciding the spacing
between mask points (Section \ref{sec:??}): \todo{insert secton
  reference} decreasing the spacing decreases the error of the
approximation of the integrals, but increases computation
time. Spacing should be decreased to a small enough value such that
any further reduction results in changes to the parameter estimates
that are negligible in size. For the \texttt{outputdetector} argument,
recall that the \texttt{secr} package calls proximity detectors that
record counts `count' detectors, while `proximity' detectors are only
capable of recording binary response data.

Importantly, now that areas have been broken down into a series of
discrete locations, we can now attach effort and habitat covariates to
each as per Section \ref{sec:??}---we no longer need to assume that
cues or individuals are equally detectable within each area.

\section{Summary}
\label{sec:area-transect-summary}

In this chapter we have considered SCR models for area search and line
transect surveys. Such surveys are common for the collection of
wildlife data, and other analysis methods exist to provide inference
about demographic parameters.

For example, distance sampling \citep[DS;][]{Buckland+al:01,
  Buckland+al:04} is a ubiquitious framework for the estimation of
animal density from line transect data. However, SCR and DS models for
line transect data vary slightly in the data that they model and the
parameters that are estimated. First, SCR methods require detection
and subsequent redetection of at least some individuals and account
for the spatial dependence between detection of the same individual,
while tradtional DS methods assume independence across detections, and
thus that each individual is only detected once. Second, traditional
DS methods use perpendicular distances from the transect to detections
to estimate a detection function, which is interpreted as the
probability of detecting an individual or cue that is physically
located at some distance from the transect at the time of the survey;
SCR, on the other hand, estimates a function that refers to the
distance from an individual's activity centre. 

As they currently exist, SCR methods for line transect data ignore the
perpendicular distances, and only use the location of the observer on
the transect at the time of each detection. This circumvents the need
to estimate a `distance sampling' detection function for how the
detectability of animals or their cues decreases with increasing
physical distance from the transect at the time of the
survey. However, this discards some potentially useful information,
and so development of a hybrid SCR and DS model has the potential to
improve inference.

A practical issue concerned with area search and line transect survey
data is the potential inability to identify individuals. If
individuals cannot be marked upon first detection, then recognition
based on physical characteristics can be difficult or impossible. Even
attempts to identify individuals from their cues using microsatellite
DNA can be prone to error \citep{Fewster:16}. In Chapter \ref{chap:??}
we present two methods that can be applied to area search data, and do
not require the collection of animal identities.

%% Some discussion points:

%% Transect detectors vs distance sampling.

%% Inability to identify individuals.
%%  - Forward reference David's ML approach and trace contrast.


